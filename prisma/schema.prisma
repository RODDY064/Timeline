datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  events        Event[]
  comments      Comment[]
  collabrote    Collabrotor[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  type        String
  finished    Boolean       @default(false)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  updatedAt   DateTime      @default(now()) @map(name: "updated_at")
  creatorId   String        @db.ObjectId
  event       Event[]
  tasks       Task[]
  team        Collabrotor[]
  user        User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model Event {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  type         String?
  finished     Boolean       @default(false)
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @default(now()) @map(name: "updated_at")
  creatorId    String        @db.ObjectId
  projectId    String?       @db.ObjectId
  tasks        Task[]
  comments     Comment[]
  collabrotors Collabrotor[]

  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model Task {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  topic     String
  content   String?
  priority  String    @default("low")
  dueDate   DateTime?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  eventId   String    @db.ObjectId

  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  projectId String?  @db.ObjectId
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String   @db.ObjectId
  eventId   String   @db.ObjectId

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Collabrotor {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  role      String
  userId    String @db.ObjectId
  projectId String @db.ObjectId
  eventId   String @db.ObjectId

  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
